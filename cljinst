#!/bin/bash

set -e

# === setup variables ===
# environment variables
CLJINST_ROOT="${CLJINST_ROOT:-$HOME/.cljinst}"
CLJINST_REPO="${CLJINST_REPO:-https://github.com/MakeNowJust/cljinst.git}"
CLJINST_CLOJURE_URL="${CLJINST_CLOJURE_URL:-http://central.maven.org/maven2/org/clojure/clojure}"

# local variables
subcommand=
options=()
verbose=0
dryrun=0
exitcode=0


# === utility functions ===
run() {
  [[ 1 -eq "$verbose" ]] && echo "[VERBOSE] $@" >/dev/stderr
  if [[ 0 -eq "$dryrun"  ]]; then
    "$@" || return $?
  fi
}

run-eval() {
  [[ 1 -eq "$verbose" ]] && echo "[VERBOSE] $@" >/dev/stderr
  if [[ 0 -eq "$dryrun"  ]]; then
    eval "$@" || return $?
  fi
}

err() {
  echo $'\e[31m'"[ERROR] $@"$'\e[0m' > /dev/stderr
}


# === parse options ===
for opt in "$@"; do
  case "$opt" in
    "-v" | "--verbose")
      verbose=1
      ;;
    "-d" | "--dryrun")
      verbose=1
      dryrun=1
      ;;
    *)
      if [[ -z "$subcommand" ]]; then
        subcommand="$opt"
      else
        options=("${options[@]}" "$opt")
      fi
  esac
done


# === main ===
main() {
  # check subcommand
  if [[ -z "$subcommand" ]]; then
    err "Please specify <subcommand>!"
    subcommand=help
    exitcode=1
  fi
  if ! declare -f "cljinst_$subcommand" >/dev/null; then
    err "$subcommand is not <subcommand>!"
    subcommand=help
    exitcode=1
  fi
  eval "cljinst_$subcommand"
  exit $exitcode
}


# === subcommands ===
cljinst_version() {
  echo "0.1.1"
}

cljinst_help() {
  echo "Usage:"
  echo "  cljinst [-vd] <subcommand> [options...]"
  echo
  echo "Subcommands:"
  echo "  version      - Show cljinst's version"
  echo "  help         - Show this help"
  echo "  list         - List of installed clojure versions"
  echo "  list-remote  - List of available clojure versions"
  echo "  install      - Install specified version clojure"
  echo "  uninstall    - Uninstall specified version clojure"
  echo "  setup        - Set up myself"
  echo "  self-update  - Update myself"
  echo
  echo "Global Options:"
  echo "  -v/--verbose - Display running commands"
  echo "  -d/--dryrun  - Display commands, but not run"
}

cljinst_list() {
  run-eval "ls '$CLJINST_ROOT/versions' | sort -fr"
}

cljinst_list-remote() {
  run-eval "curl $CLJINST_CLOJURE_URL/maven-metadata.xml 2>/dev/null | awk -F '[<>]' '/<version>/{ print \$3}'"
}

cljinst_install() {
  # check options
  ver="${options[0]}"
  if [[ -z "$ver" ]]; then
    err "please specify version of clojure to install"
    exitcode=1; return
  fi

  if [[ -d "$CLJINST_ROOT/versions/$ver" && -f "$CLJINST_ROOT/versions/$ver/clojure-${ver}.jar" ]]; then
    err "clojure $ver is already installed"
    exitcode=1; return
  fi
  [[ ! -d "$CLJINST_ROOT/versions/$ver" ]] && run mkdir -p "$CLJINST_ROOT/versions/$ver"
  run cd "$CLJINST_ROOT/versions/$ver"
  [[ ! -d "$CLJINST_ROOT/versions/$ver/clojure-${ver}.jar" ]] && if ! run-eval 'curl -fO "$CLJINST_CLOJURE_URL/$ver/clojure-${ver}.jar" 2>/dev/null'; then
    err "installing clojure $ver was failure"
    rm -rf "$CLJINST_ROOT/versions/$ver"
    exitcode=$?
  fi
}

cljinst_uninstall() {
  # check options
  ver="${options[0]}"
  if [[ -z "$ver" ]]; then
    err "please specify version of clojure to uninstall"
    exitcode=1; return
  fi

  if [[ ! -d "$CLJINST_ROOT/versions/$ver" ]]; then
    err "clojure $ver have not installed yet"
    exitcode=1; return
  fi
  run rm -rf "$CLJINST_ROOT/versions/$ver"
}

cljinst_setup() {
  verbose=1
  if [[ -d "$CLJINST_ROOT" && -d "$CLJINST_ROOT/versions" ]]; then
    err "cljinst is already installed"
    exitcode=1; return
  fi
  [[ ! -d "$CLJINST_ROOT" ]] && run git clone "$CLJINST_REPO" "$CLJINST_ROOT"
  [[ ! -d "$CLJINST_ROOT/versions" ]] && run mkdir "$CLJINST_ROOT/versions"
  [[ ! -f "$CLJINST_ROOT/init.clj" ]] && run cp "$CLJINST_ROOT/init.default.clj" "$CLJINST_ROOT/init.clj"

  echo
  echo "cljinst is successfully installed."
  echo "please add the following line into your ~/.bashrc etc:"
  echo "  export PATH=$CLJINST_ROOT:\$PATH"
}

cljinst_self-update() {
  run cd "$CLJINST_ROOT"
  run git pull
}

# === running main ===
main
